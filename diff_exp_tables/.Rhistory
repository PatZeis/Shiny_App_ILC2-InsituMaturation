x[x$pval < 0.05,]
}
)
my_list5 <- lapply(my_list3, function(x){
x[order(x$log2FoldChange),]
}
)
my_list6 <- lapply(my_list4, function(x){
x[order(x$log2FoldChange),]
}
)
head(my_list4$clust_8_vs_all, 10)
plotmap(sc)
plotexpmap(sc, "Cd3e", logsc = T)
plotexpmap(sc, "Klrb1c", logsc = T)
names(sc@cpart[sc@cpart == 8])
table(sub("\\_.+", "", colnames(sc@ndata)))
plotexpmap(sc, "Klrb1b", logsc = T)
plotexpmap(sc, "Klrk1", logsc = T)
dm
f
dm[2,f]
sc <- readRDS("~/Desktop/ILC_Paper_start/chimera.RData")
plotmap(sc)
library(RaceID)
plotmap(sc)
sc <- compumap(sc)
plotmap(sc)
cluster2 <- c(16, 17,  6, 10, 11,13, 3, 2, 4, 5, 12, 8,7,14, 15,1,19, 9)
genes2 <- c( "Tbx21","Rorc", "Gata3", "Il1rl1", "Il17rb","Il2ra", "Il18r1", "Icos", "Thy1", "Il7r", "Zbtb16", "Tcf7", "Cd7", "Cd3e",  "S100a6", "Id2", "Arg1","Klrg1","Mki67", "Vim","Cd69", "S1pr1","Klf2", "Cxcl2", "Csf2", "Il2", "Calca","Il5","Il13","Pdcd1", "Ctla4","Il1r2","H2-Ab1", "Areg", "Klf4", "Rgs2")
genes2 <- c( "Tbx21","Rorc", "Gata3", "Il1rl1", "Il17rb","Il2ra", "Il18r1", "Icos", "Thy1", "Il7r", "Zbtb16", "Tcf7", "Cd7", "Cd3e",  "S100a6", "Id2", "Arg1","Klrg1","Mki67", "Vim","Cd69", "S1pr1","Klf2", "Cxcl2", "Csf2", "Il2", "Calca","Il5","Il13","Pdcd1", "Ctla4","Il1r2","H2-Ab1", "Areg", "Klf4", "Rgs2", "Sox4", "Tox2", "Pdcd1")
genes2 <- c( "Tbx21","Rorc", "Gata3", "Il1rl1", "Il17rb","Il2ra", "Il18r1", "Icos", "Thy1", "Il7r", "Zbtb16", "Tcf7", "Cd7", "Cd3e",  "S100a6", "Id2", "Arg1","Klrg1","Mki67", "Vim","Cd69", "S1pr1","Klf2", "Cxcl2", "Csf2", "Il2", "Calca","Il5","Il13","Pdcd1", "Ctla4","Il1r2","H2-Ab1", "Areg", "Klf4", "Rgs2", "Sox4", "Tox2")
source("~/Desktop/ILC/Scripts_RefTable/fracdotplotmapleg.R")
fracdotplot( genes2, cluster2,limdown = -1, limup = 1 )
identical(names(sc@cpart), colnames(sc@ndata))
names(sc@cpart) <- colnames(sc@ndata)
identical(names(sc@cpart), colnames(sc@ndata))
fracdotplot( genes2, cluster2,limdown = -1, limup = 1 )
1493/11
12*31*10
3720*0.51 EUR
3720*0.51
?seq
library(shiny)
runApp('Desktop/shiny_app_tutorial.R')
runApp('Desktop/shiny_app_tutorial.R')
load("~/Desktop/ILC_Paper_start/wildtype/wildtype_final_fateID.RData")
plotmap(sc)
library(RaceID)
sc <- compumap(sc)
library(RaceID)
plotmap(sc)
plotexpmap(sc, "Itgae", logsc = T)
cl1_5 <- names(sc@cpart)[sc@cpart %in% c(1,5)]
cl1_5 <- sc@ndata[,cl1_5]
class(cl1_5)
cl1_5 <- data.frame(as.matrix(cl1_5))
class(cl1_5)
cl1_5_itgae <- colnames(cl1_5[,which(as.numeric(cl1_5["Itgae",]) > 0)])
diM(cl1_5)
dim(cl1_5)
length(cl1_5_itgae)
cl1_5_itgaeneg <- colnames(cl1_5)[!colnames(cl1_5) %in% cl1_5_itgae]
length(cl1_5_itgaeneg)
ndata <- as.matrix(sc@ndata * min(sc@counts)) + 0.1
ndata <- data.frame(ndata)
xd <- diffexpnb(ndata, cl1_5_itgaeneg, cl1_5_itgae, vfit = sc@background$vfit)
plotdiffgenesnb(xd, padj = F)
plotmap(sc)
plotexpmap(sc, "Itgae", logsc = T)
cl1_5_itgae
plot(ndata["Zbtb16",colnames(cl1_5)], ndata["Itgae",colnames(cl1_5)])
plot(ndata["Zbtb16",colnames(cl1_5)], ndata["Itgae",colnames(cl1_5)])
plot(as.numeric(ndata["Zbtb16",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]))
plot(as.numeric(ndata["Tcf7",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]))
plot(as.numeric(ndata["Il1rl1",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]))
cor <- cor(as.numeric(ndata["Zbtb16",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]))
cor
cor <- cor(as.numeric(ndata["Tcf7",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]))
cor
cor <- cor(as.numeric(ndata["St2",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]))
cor
cor <- cor(as.numeric(ndata["Il1rl1",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]))
cor
cor <- cor(as.numeric(ndata["Zbtb16",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]), method="pearson")
cor <- cor(as.numeric(ndata["Zbtb16",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]), method="spearman")
cor
cor <- cor(as.numeric(ndata["Zbtb16",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]), method="pearson")
cor
cor <- cor(as.numeric(ndata["Ccr6",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]), method="pearson")
cor
plot(as.numeric(ndata["Ccr6",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]))
cor <- cor(as.numeric(ndata["Ccr6",colnames(cl1_5)]), as.numeric(ndata["Itgae",colnames(cl1_5)]), method="spearman")
cor
plotdiffgenesnb(xd, padj = F)
plotmap(sc)
Sys.getenv("YOUR_VAR")
Sys.getenv("R_MAX_VSIZE")
Sys.getenv("R_MAX_VSIZE")
10^12
100GB
100Gb
R.methodsS3::
R_MAX_VSIZE
Sys.getenv("R_MAX_VSIZE")
100
100Gb
10^9
Sys.getenv("R_MAX_VSIZE")
restinglung.integrated2 <- readRDS("~/Desktop/ILC/Locksley_analysis/sctransform_corrected.RData")
dimred2 <- data.frame(as.matrix(restinglung.integrated2@assays$integrated@data))
dim(dimred2)
prdata2 <- data.frame(as.matrix(restinglung.integrated2@assays$RNA@data))
dim(prdata2)
prdata2 <- prdata2[grep("^(ERCC|mt)",row.names(prdata2),invert=TRUE),]
dim(prdata2)
cs <- apply(prdata2,2,sum)
prdata2 <- prdata2[,cs > 500]
cs <- cs[cs > 500]
f <- t(prdata2["Kcnq1ot1",])/cs < .02
prdata2 <- prdata2[,f]
library(RaceID)
library(FateID)
mintotal <- 700
minexpr <- round(5*mintotal/3000,0)
outminc <- round(5*mintotal/3000,0)
CGenes <- NULL
ccor <- 0.65
FGenes <- NULL
prdata2 <- Matrix(as.matrix(prdata2),sparse=TRUE)
library(RaceID)
prdata2 <- Matrix(as.matrix(prdata2),sparse=TRUE)
library(Seurat)
prdata2 <- Matrix(as.matrix(prdata2),sparse=TRUE)
sc <- SCseq(prdata2)
?Matrix
library(Matrix)
prdata2 <- Matrix(as.matrix(prdata2),sparse=TRUE)
sc <- SCseq(prdata2)
sc <- filterdata(sc, mintotal=mintotal, minexpr=minexpr, minnumber=1, LBatch=NULL, knn=10, FGenes=FGenes, CGenes=CGenes, ccor=ccor, bmode="RaceID")
sc@dimRed$x <- dimred2
sc <- compdist(sc,metric="pearson",FSelect=F,knn=NULL)
sc <- clustexp(sc,sat=TRUE,samp=1000,cln=NULL,clustnr=30,bootnr=50,rseed=17000,FUNcluster="kmedoids")
Sys.getenv("R_MAX_VSIZE")
33/26
278/267
-1.024,75 / 3
-1024.75 / 3
load("~/Desktop/ILC_Paper_start/wildtype/wildtype_final_fateID.RData")
plotmap(sc)
library(RaceID)
sc <- compumap(sc)
plotmap(sc)
plotexpmap(sc, "Il18r1", logsc = t)
plotexpmap(sc, "Il18r1", logsc = T)
plotexpmap(sc, "Mki67", logsc = T)
progenitors <- names(sc@cpart)[sc@cpart %in% c(1, 5, 11)]
prdata <- prdata[, colnames(prdata) %in% progenitors]
dim(prdata)
sc <- SCseq(prdata)
sc <- filterdata(sc, mintotal=mintotal, minexpr=minexpr, minnumber=1, LBatch=NULL, knn=10, FGenes=FGenes, CGenes=CGenes, ccor=0.65, bmode="RaceID")
sc <- compdist(sc,metric="pearson",FSelect=T,knn=10)
sc <- clustexp(sc,sat=TRUE,samp=1000,cln=NULL,clustnr=30,bootnr=50,rseed=17000,FUNcluster="kmedoids")
sc <- comptsne(sc,rseed=15555,perplexity=200)
sc <- findoutliers(sc,probthr=0.001,outminc=outminc,outlg=2,outdistquant=0.95)
sc <- comptsne(sc,rseed=15555,perplexity=30)
plotmap(sc)
plotmap(sc, cex = 1.25)
plotexpmap(sc, "Il17rb", logsc = T)
plotexpmap(sc, "Zbtb16", logsc = T)
plotexpmap(sc, "Rorc", logsc = T)
plotexpmap(sc, "Trdc", logsc = T)
plotexpmap(sc, "Actb", logsc = T)
### differential expression analysis all cluster
differential_allcluster <- function(object, clustsize=10) {
all_list <- list()
ndata <- as.matrix(object@ndata * min(object@counts)) + 0.1
ndata <- data.frame(ndata)
cpart <- object@cpart
names(cpart) <- colnames(ndata)
uniq <- sort(unique(cpart))
head(uniq)
my_list <- list()
for (i in 1:length(uniq)){
x <- names(cpart[cpart == uniq[i]])
my_list[[i]] <- x #assign(paste("clust", i, sep = "_"),x)
names(my_list)[[i]] <- paste("clust", uniq[i], sep="_")
}
my_list2 <- list()
cluster <- as.numeric(names(table(object@cpart)[table(object@cpart) >= clustsize]))
for (i in 1:length(cluster)){
#cat("running",names(my_list)[i],"\n")
xd <- diffexpnb(ndata, my_list[[cluster[i]]], method="per-condition", colnames(ndata[,!(colnames(ndata) %in% my_list[[cluster[i]]])]), norm=F,vfit=object@background$vfit)
xd <- xd$res
xd <- xd[order(xd$pval),]
#assign(paste("diff_clust", i, sep="_"), xd)
my_list2[[i]] <- xd
names(my_list2)[[i]] <- paste("clust", cluster[i], "vs_all", sep="_")
}
my_list3 <- list()
for (i in 1:length(my_list2)){
my_list3[[i]] <- my_list2[[i]][my_list2[[i]]$log2FoldChange < 0,]
names(my_list3)[[i]] <- names(my_list2)[[i]]
}
my_list7 <- list()
for (i in 1:length(my_list2)){
my_list7[[i]] <- my_list2[[i]][my_list2[[i]]$log2FoldChange > 0,]
names(my_list7)[[i]] <- names(my_list2)[[i]]
}
#### Julia macrophages per-condition diffexpnb
Rpl <- rownames(object@ndata)[grep("Rpl", rownames(object@ndata))]
Rps <- rownames(object@ndata)[grep("Rps", rownames(object@ndata))]
Gm <- rownames(object@ndata)[grep("Gm\\d+", rownames(object@ndata))]
Rp <- rownames(object@ndata)[grep("RP\\d+", rownames(object@ndata))]
Rik <- rownames(object@ndata)[grep("Rik", rownames(object@ndata))]
out <- c(Rpl, Rps, Gm, Rik, Rp)
my_list4 <- list()
for (i in 1:length(my_list3)) {
my_list4[[i]] <- my_list3[[i]][!(rownames(my_list3[[i]]) %in% out),]
names(my_list4)[[i]] <- names(my_list3)[[i]]
}
my_list8 <- lapply(my_list4, function(x){
x[x$pval < 0.05,]
}
)
my_list9 <- lapply(my_list7, function(x){
x[x$pval < 0.05,]
}
)
my_list5 <- lapply(my_list3, function(x){
x[order(x$log2FoldChange),]
}
)
my_list6 <- lapply(my_list4, function(x){
x[order(x$log2FoldChange),]
})
all_list <- list(my_list, my_list2, my_list3, my_list4, my_list5, my_list6, my_list7, my_list8, my_list9)
names(all_list) <- c("my_list", "my_list2", "my_list3", "my_list4", "my_list5", "my_list6", "my_list7", "my_list8", "my_list9")
return(all_list)
}
table(sc@cpart)
diff <- differential_allcluster(sc)
plotmap(sc)
head(my_list4$clust_2_vs_all, 10)
plotexpmap(sc, "Rgs2", logsc = T)
plotexpmap(sc, "Junb", logsc = T)
plotexpmap(sc, "Fosb", logsc = T)
plotexpmap(sc, "Klf4", logsc = T)
plotexpmap(sc, "Klf2", logsc = T)
plotexpmap(sc, "Arg1", logsc = T)
dim(prdata)
getwd()
saveRDS("~/Desktop/ILC_Paper_start/cl1_cl5_cl11.RData")
saveRDS(sc, "~/Desktop/ILC_Paper_start/cl1_cl5_cl11.RData")
plotmap(sc)
plotexpmap(sc, "Cd2", logsc = T)
0.005259 * 750000
sc <- readRDS("~/Desktop/ILC/culture_TDL/final_culture_TDL.RData")
prdata <- sc
prdata <- prdata[, grep("TDL1|TDL2|Mock|d9ivCD45", colnames(prdata))]
dim(prdata)
prdata <- prdata[grep("^(ERCC|mt)",row.names(prdata),invert=TRUE),]
dim(prdata)
cs <- apply(prdata,2,sum)
prdata <- prdata[,cs > 500]
cs <- cs[cs > 500]
f <- t(prdata["Kcnq1ot1",])/cs < .02
prdata <- prdata[,f]
library(RaceID)
library(FateID)
mintotal <- 3000
minexpr <- round(5*mintotal/3000,0)
outminc <- round(5*mintotal/3000,0)
#Jun           <- rownames(prdata)[grepl("Jun", rownames(prdata))] ## genes like Nr4a1, Tnfaip3 cor already with 0.65
#Fos           <- rownames(prdata)[grepl("Fos", rownames(prdata))] ## only FGenes or not
Gm            <- rownames(prdata)[grepl("Gm\\d+", rownames(prdata))] ### also FGenes also functional genes
RP            <- rownames(prdata)[grepl("RP", rownames(prdata))] ### also FGenes same as Rik
#Rps           <- rownames(prdata)[grepl("Rps", rownames(prdata))] ### not many correlated can also go in Fgenes
#Rpl           <- rownames(prdata)[grepl("Rpl", rownames(prdata))] ###
#Rik           <- rownames(prdata)[grepl("Rik", rownames(prdata))] ### only FGenes also functional genes such as Cd74
Hsp           <- rownames(prdata)[grepl("Hsp", rownames(prdata))] ## okay
Igl            <- rownames(prdata)[grepl("Igl", rownames(prdata))] ## okay
Igh           <- rownames(prdata)[grepl("Igh", rownames(prdata))] ## okay
A4300  <- rownames(prdata)[grepl("A4300", rownames(prdata))]
CGenes        <- c( Gm, RP,  Hsp, "Scgb1a1", "Jchain", Igl, Igh, "Igkc", "Malat1", "Xist", A4300, "Mid1", "Kcnq1ot1", "Mki67", "Pcna", "Tuba1a|Tuba1b", "Top2a", "Tubb5", "Actb", "Pcna-ps2", "Gzma")
sc2 <- SCseq(prdata)
sc2 <- filterdata(sc2, mintotal=mintotal, minexpr=minexpr, minnumber=1, LBatch=NULL, knn=10, FGenes=FGenes, CGenes=CGenes, ccor=0.65, bmode="RaceID")
sc2 <- compdist(sc2,metric="pearson",FSelect=T,knn=10)
sc2 <- clustexp(sc2,sat=TRUE,samp=1000,cln=NULL,clustnr=30,bootnr=50,rseed=17000,FUNcluster="kmedoids")
sc2 <- comptsne(sc2,rseed=15555,perplexity=30)
sc2 <- findoutliers(sc2, probthr=0.001,outminc=outminc,outlg=2,outdistquant=0.95)
FGenes <- NULL
sc2 <- SCseq(prdata)
sc2 <- filterdata(sc2, mintotal=mintotal, minexpr=minexpr, minnumber=1, LBatch=NULL, knn=10, FGenes=FGenes, CGenes=CGenes, ccor=0.65, bmode="RaceID")
sc2 <- compdist(sc2,metric="pearson",FSelect=T,knn=10)
sc2 <- clustexp(sc2,sat=TRUE,samp=1000,cln=NULL,clustnr=30,bootnr=50,rseed=17000,FUNcluster="kmedoids")
sc2 <- comptsne(sc2,rseed=15555,perplexity=30)
sc2 <- findoutliers(sc2, probthr=0.001,outminc=outminc,outlg=2,outdistquant=0.95)
plotmap(sc)
plotmap(sc2)
source("~/Desktop/ILC/Scripts_RefTable/differential_all_cluster.R")
table(sc2@cpart)
diff_all <- differential_allcluster(sc2, clustsize = 1)
head(diff_all$my_list4$clust_4_vs_all, 10)
head(diff_all$my_list7$clust_4_vs_all, 10)
head(diff_all$my_list7$clust_19_vs_all, 10)
head(diff_all$my_list4$clust_19_vs_all, 10)
head(diff_all$my_list4$clust_10_vs_all, 10)
head(diff_all$my_list4$clust_5_vs_all, 10)
head(diff_all$my_list4$clust_5_vs_all, 20)
head(diff_all$my_list4$clust_16_vs_all, 20)
head(diff_all$my_list4$clust_16_vs_all, 30)
head(diff_all$my_list4$clust_7_vs_all, 30)
head(diff_all$my_list4$clust_15_vs_all, 30)
head(diff_all$my_list4$clust_17_vs_all, 30)
out <- names(sc2@cpart)[sc2@cpart %in% c(10, 7, 16,5, 17, 19, 4  )]
prdata2 <- prdata[, !colnames(prdata) %in% out]
sc2 <- SCseq(prdata2)
sc2 <- filterdata(sc2, mintotal=mintotal, minexpr=minexpr, minnumber=1, LBatch=NULL, knn=10, FGenes=FGenes, CGenes=CGenes, ccor=0.65, bmode="RaceID")
sc2 <- compdist(sc2,metric="pearson",FSelect=T,knn=10)
sc2 <- clustexp(sc2,sat=TRUE,samp=1000,cln=NULL,clustnr=30,bootnr=50,rseed=17000,FUNcluster="kmedoids")
sc2 <- comptsne(sc2,rseed=15555,perplexity=30)
sc2 <- findoutliers(sc2, probthr=0.001,outminc=outminc,outlg=2,outdistquant=0.95)
plotmap(sc)
plotmap(sc2)
diff_all2 <- differential_allcluster(sc2, clustsize = 1)
head(diff_all$my_list4$clust_10_vs_all, 10)
head(diff_all$my_list4$clust_10_vs_all, 11)
head(diff_all$my_list4$clust_11_vs_all, 11)
out2 <- names(sc2@cpart)[sc2@cpart == 10] ## nkcells
prdata2 <- prdata2[, !colnames(prdata2) %in% out2]
### ccor to 0.4 to remove proliferation signature more
sc2 <- SCseq(prdata2)
sc2 <- filterdata(sc2, mintotal=mintotal, minexpr=minexpr, minnumber=1, LBatch=NULL, knn=10, FGenes=FGenes, CGenes=CGenes, ccor=0.4, bmode="RaceID")
sc2 <- compdist(sc2,metric="pearson",FSelect=T,knn=10)
sc2 <- clustexp(sc2,sat=TRUE,samp=1000,cln=NULL,clustnr=30,bootnr=50,rseed=17000,FUNcluster="kmedoids")
sc2 <- comptsne(sc2,rseed=15555,perplexity=30)
sc2 <- compumap(sc2)
sc2 <- findoutliers(sc2, probthr=0.001,outminc=outminc,outlg=2,outdistquant=0.95)
plotmap(sc)
plotmap(sc2)
plotmap(sc2, final = F)
vignette("RaceID")
prdata3 <- t(t(prdata2)/colSums(prdata2))  ### if not normalized for library size many more genes are correlated
genes2 <- as.logical(apply(prdata2, 1, max) >= 5)
genes2 <- rownames(prdata2)[genes2]
ccor <- cor(t(as.matrix(prdata3[CGenes],])), t(as.matrix(prdata3[genes2[!genes2 %in% c(CGenes)],])))
cc_cor <- as.logical(apply(ccor, 2, max, na.rm=T) >= 0.4)
cc_cor_genes <- colnames(ccor)[cc_cor]
ccor <- cor(t(as.matrix(prdata3[CGenes,])), t(as.matrix(prdata3[genes2[!genes2 %in% c(CGenes)],])))
cc_cor <- as.logical(apply(ccor, 2, max, na.rm=T) >= 0.4)
cc_cor_genes <- colnames(ccor)[cc_cor]
cc_cor_genes
length(sc2@cluster$features)
cc_genes <- c("Mki67", "Pcna", "Tuba1a|Tuba1b", "Top2a", "Tubb5", "Actb", "Pcna-ps2")
ccor <- cor(t(as.matrix(prdata3[cc_genes,])), t(as.matrix(prdata3[genes2[!genes2 %in% c(CGenes, cc_genes],])))
cc_cor <- as.logical(apply(ccor, 2, max, na.rm=T) >= 0.4)
cc_cor_genes2 <- colnames(ccor)[cc_cor]
cc_genes <- c("Mki67", "Pcna", "Tuba1a|Tuba1b", "Top2a", "Tubb5", "Actb", "Pcna-ps2")
ccor <- cor(t(as.matrix(prdata3[cc_genes,])), t(as.matrix(prdata3[genes2[!genes2 %in% c(CGenes, cc_genes),])))
cc_cor <- as.logical(apply(ccor, 2, max, na.rm=T) >= 0.4)
cc_cor_genes2 <- colnames(ccor)[cc_cor]
ccor <- cor(t(as.matrix(prdata3[cc_genes,])), t(as.matrix(prdata3[genes2[!genes2 %in% c(CGenes, cc_genes)],)))
cc_cor <- as.logical(apply(ccor, 2, max, na.rm=T) >= 0.4)
ccor <- cor(t(as.matrix(prdata3[cc_genes,])), t(as.matrix(prdata3[genes2[!genes2 %in% c(CGenes, cc_genes)],])))
cc_cor <- as.logical(apply(ccor, 2, max, na.rm=T) >= 0.4)
cc_cor_genes2 <- colnames(ccor)[cc_cor]
length(cc_cor_genes2)
cc_cor_genes2
length(cc_cor_genes2)
length(cc_cor_genes)
length(sc2@genes)
head(cc_cor_genes)
plotexpmap(sc, "Areg", logsc = T)
plotexpmap(sc2, "Areg", logsc = T)
length(sc2@cluster$features)
sc2@cluster$features
ccor <- cor(t(as.matrix(prdata3[CGenes,])), t(as.matrix(prdata3[genes2[!genes2 %in% c(CGenes, cc_genes)],])))
cc_cor <- as.logical(apply(ccor, 2, max, na.rm=T) >= 0.65)
cc_cor_genes3 <- colnames(ccor)[cc_cor]
length(cc_cor_genes3)
cc_cor_genes3
table(sc2@cpart)
table(sc2@cluster$kpart)
plotmap()
plotmap(sc)
plotmap
compumap
compmedoids
?pam
load("~/Desktop/ILC_Paper_start/wildtype/wildtype_final_fateID.RData")
plotmap(sc)
library(RaceID)
sc <- compumap(sc)
plotexpmap(sc, "Vmn2r53|Vmn2r54|Vmn2r55|Vmn2r56", logsc = T)
"Vmn2r53|Vmn2r54|Vmn2r55|Vmn2r56" %in% CGenes
plotexpmap(sc, "Stxbp4", logsc = T)
length(sc@cluster$features)
900 * 0.005
types <- types[order(types)]
?plotexpmap
cycl_non_cycl <- Scoring(sc, features2, st = "cycling", nd="noncycling")
cycle_phases <- Scoring(sc, features, st="S", nd="G2M", null = "G1")
load("~/Desktop/ILC/ILC_lung_Encode/wt_mintot3k_probthr3_cell_cycle.RData")
plottsne(sc)
plotexpmap(sc, "Ace2", logsc = T)
plotexpmap(sc, "Ace2", logsc = T, fr = F)
plotexptsne(sc, "Ace2", logsc = T)
library(RColorBrewer)
plotexptsne(sc, "Ace2", logsc = T)
diff_exp_table <- readRDS("~/Desktop/Shiny_app/diff_exp_tables/wt_diff_exp_table_filt.RData")
class(diff_exp_table)
head(diff_exp_table$clust_4_vs_all)
tail(diff_exp_table$clust_4_vs_all)
load("~/Desktop/ILC_Paper_start/RData_bm_cln6.RData")
library(RaceID)
sc <- compumap(sc)
plotmap(sc)
head(my_list4$clust_4_vs_all, 10)
head(my_list4$clust_8_vs_all, 10)
plotexpmap(sc, "Cd74", logsc = T)
plotexpmap(sc, "Jund", logsc = T)
getwd()
setwd("~/Desktop/Shiny_app/diff_exp_tables/")
my_list10 <- lapply(my_list2, function(x){
x <- x[x$pval <0.05,]
x <- x[,-c(1,4)]
colnames(x) <- c("mean.cl", "mean.other.cl", "log2FC", "pval", "padj")
x[,"log2FC"] <- x[,"log2FC"] * -1
x <- apply(x, 2, function(x) round(x, digits = 5))
})
saveRDS(my_list10, bmt_diff_exp_table_filt.RData")
saveRDS(my_list10, "bm_diff_exp_table_filt.RData")
head(my_list4$clust_1_vs_all, 10)
head(my_list10$clust_1_vs_all, 10)
head(my_list10$clust_5_vs_all, 10)
head(my_list10$clust_2_vs_all, 10)
load("~/Desktop/ILC_Paper_start/RData_neonat_proliferation_out.RData")
plotmap(sc)
sc <- compumap(sc)
plotmap(sc)
sc@expdata <- c()
saveRDS(sc, file = "../sc_objects/sc_neonat_proliferation_out.RData")
source("~/Desktop/ILC/Scripts_RefTable/differential_all_cluster.R")
diff_all <- differential_allcluster(sc)
head(diff_all$my_list4$clust_9_vs_all, 10)
my_list10 <- lapply(diff_all$my_list2, function(x){
x <- x[x$pval <0.05,]
x <- x[,-c(1,4)]
colnames(x) <- c("mean.cl", "mean.other.cl", "log2FC", "pval", "padj")
x[,"log2FC"] <- x[,"log2FC"] * -1
x <- apply(x, 2, function(x) round(x, digits = 5))
})
head(my_list10$clust_9_vs_all, 10)
getwd()
saveRDS(my_list10, "neonat_diff_exp_table_filt.RData")
0.00000540*5000
0.00000540*5000*6745
head(names(n12))
branch_data <- list(ndata_il13_branch = ndata12, cluspar_il13_branch = y12, pseudoorder_il13_branch=n12$f, fcol = fcol12, ndata_cxcl2_branch = ndata14, cluspar_cxcl2_branch = y14, pseudoorder_cxcl2_branch=n14$f )
y12clust <- y12
branch_data <- list(ndata_il13_branch = ndata12, cluspar_il13_branch = y12clust, samplepar_il13_branch=y12,pseudoorder_il13_branch=n12$f, fcol = fcol12, sampcol= set1,ndata_cxcl2_branch = ndata14, cluspar_cxcl2_branch = y14clust, samplepar_cxcl2_branch=y14, pseudoorder_cxcl2_branch=n14$f )
n12 <- cellsfromtree(ltr, c(12,5, 2, 8, 6, 16))
n14 <- cellsfromtree(ltr, c(12,5,2 ,8, 4, 23))
saveRDS(branch_data, "~/Desktop/Shiny_app/StemID_Il13_Cxcl_branches_timecourse.RData" )
getype2 <- function(ma,y, y1){
z <- sum(grepl(y, colnames(ma)))
colnames(ma)[grep( y, colnames(ma))] <- paste(y1, 1:z, sep="_")
return(ma)
}
sc@ndata <- getype2(sc@ndata, "Blood", "f.d15Blood")
sc@ndata <- getype2(sc@ndata, "d14", "g.d15")
sc@ndata <- getype2(sc@ndata, "d4", "b.d4")
sc@ndata <- getype2(sc@ndata, "d7", "c.d7")
sc@ndata <- getype2(sc@ndata, "d10","d.d10")
sc@ndata <- getype2(sc@ndata, "iv45", "e.d10ivCD45")
sc@ndata <- getype2(sc@ndata, "wt","a.uninfected")
types <- sub("(\\_|\\.).+","", colnames(sc@ndata))
types_num <- as.numeric(table(types))
types <- unique(types)
types <- types[order(types)]
plotsymbolsmap(sc, types = sub("\\_.+", "", colnames(sc@ndata)), samples_col = set1, cex = 1, leg = T,map = F)
library(RColorBrewer)
set2 <- brewer.pal(7, "Set2")
set1 <- brewer.pal(7, "Set1")
set1 <- c(set1[7], set2[6],set1[5], set1[3], set1[4], set1[2], set1[1])
plotsymbolsmap(sc, types = sub("\\_.+", "", colnames(sc@ndata)), samples_col = set1, cex = 1, leg = F, map = T)
load("~/Desktop/ILC/Locksley_analysis/Locksley_Dataset_integration/sc_transform_pearson_residual_integration /Seurat/Rdata_sctransform_CCA_RaceID_Seurat.RData")
source("~/Desktop/ILC/Scripts_RefTable/plotexpmap_seurat.R")
plotmap(restinglung.integrated2, seurat = T, medoids = medoids)
load("~/Desktop/ILC/Locksley_analysis/Locksley_Dataset_integration/Locksley_lung_skin_our_lung_cells_nkcells_our_removed_cell_cycle_removed/Rdata_locksskin_lockslung_lung_integration.RData")
plotmap(restinglung.integrated2, seurat = T, medoids = medoids)
plotexpmap(restinglung.integrated2, "Marcks", logsc = T, seurat = T, mintotal = 2000, leg = F)
plotexpmap(restinglung.integrated2, "Ebf1", logsc = T, seurat = T, mintotal = 2000, leg = F)
saveRDS(restinglung.integrated2, "locksley_skin_lung_integration.RData")
getwd()
plotexpmap(restinglung.integrated2, "Itgae", logsc = T, seurat = T, mintotal = 2000, leg = F)
plotexpmap(restinglung.integrated2, "Gata3", logsc = T, seurat = T, mintotal = 2000, leg = F)
load("~/Desktop/ILC/Walker_McKenzie/Dataset_integration_macckenzie/Rdata_mcKenzie_analysis_ILC2P_ILCP_ourBM_integration.RData")
plotmap(sc)
plotmap(sc, final = F)
getwd()
pdf(file.path(".", "test.pdf"))
dev.off()
dev.off()
getwd()
plotmap(sc, final = F)
plotmap(sc, final = F, um = T)
load("~/Desktop/ILC/Walker_McKenzie/walker_bm_integration_paper/")
load("~/Desktop/ILC/Walker_McKenzie/walker_bm_integration_paper/Rdata_integration_BM_walker.RData")
plotmap(sc, final = F, um = T)
saveRDS(sc, file = "Walker_Mckenzie_integration.RData")
